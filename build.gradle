plugins {
	id 'java'
	id 'jacoco'
	id 'application'
    id "org.checkerframework" version '0.4.8'
	id 'org.openjfx.javafxplugin' version '0.0.7' apply false
	id 'eclipse'
    id 'org.springframework.boot' version '2.2.1.RELEASE'
    id 'io.spring.dependency-management' version '1.0.8.RELEASE'
}

group = 'com.game'
version = '0.0.1-SNAPSHOT'
sourceCompatibility = '1.8'
targetCompatibility = '1.8'

if (JavaVersion.current() > org.gradle.api.JavaVersion.VERSION_1_10) {
    println('Current JavaVersion: "' + JavaVersion.current() + '"');
    println('Apply org.openjfx.javafxplugin');
    apply plugin: 'org.openjfx.javafxplugin'
    javafx {
    	version = '12.0.1'
		modules = ['javafx.base','javafx.controls','javafx.fxml','javafx.graphics']
    }
} 

jar {
    baseName = 'towerDefence'
    version =  '0.1.0'
    destinationDir = file("/")
    manifest {
        attributes 'Implementation-Title': baseName,
                'Implementation-Version': version,
                'Main-Class': 'project.Main'
    }
    from { configurations.compile.collect { it.isDirectory() ? it : zipTree(it) } }
}

mainClassName = 'project.Main'

configurations {
    compileOnly {
        extendsFrom annotationProcessor
    }
}

repositories {
    mavenCentral()
}


task debug(type:JavaExec) {
    group 'application'
    description 'debug'
    jvmArgs '-Xdebug', '-Xrunjdwp:transport=dt_socket,server=y,suspend=y,address=9099'
    main = 'project.Main'
    classpath = sourceSets.main.runtimeClasspath
}

dependencies {
    // https://mvnrepository.com/artifact/net.sourceforge.htmlunit/htmlunit
    compile group: 'net.sourceforge.htmlunit', name: 'htmlunit', version: '2.31'

    // https://mvnrepository.com/artifact/junit/junit
    testCompile group: 'junit', name: 'junit', version: '4.12'

    // testFX - https://github.com/TestFX/TestFX
    testCompile group: 'org.testfx', name: 'testfx-junit', version: '4.0.15-alpha'

    // https://mvnrepository.com/artifact/javax.persistence/javax.persistence-api/2.2
    compile group: 'javax.persistence', name: 'javax.persistence-api', version: '2.2'

    // https://mvnrepository.com/artifact/javax.validation/validation-api/2.0.1.Final
    compile group: 'javax.validation', name: 'validation-api', version: '2.0.1.Final'

    // https://mvnrepository.com/artifact/math.geom2d/javaGeom/0.11.1
    compile group: 'math.geom2d', name: 'javaGeom', version: '0.11.1'

    // https://search.maven.org/artifact/org.jadira.cloning/cloning/3.1.0.CR10/jar
    implementation 'org.jadira.cloning:cloning:3.1.0.CR10'

    implementation 'org.springframework.boot:spring-boot-starter-data-jpa'
    implementation 'org.springframework.boot:spring-boot-starter-web'
    compileOnly 'org.projectlombok:lombok'
    runtimeOnly 'com.h2database:h2'
    runtimeOnly 'mysql:mysql-connector-java'
    annotationProcessor 'org.projectlombok:lombok'
    testImplementation('org.springframework.boot:spring-boot-starter-test') {
        exclude group: 'org.junit.vintage', module: 'junit-vintage-engine'
    }
    implementation 'org.springframework.boot:spring-boot-starter-thymeleaf'

    // https://mvnrepository.com/artifact/uk.com.robust-it/cloning
    compile group: 'uk.com.robust-it', name: 'cloning', version: '1.9.2'
}

test {
    useJUnitPlatform()
}

jacoco {
    toolVersion = "0.8.2"
}

jacocoTestReport {
    reports {
        xml.enabled false
        csv.enabled false
        html.destination file("${buildDir}/jacocoHTML")
    }
}